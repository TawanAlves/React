// eslint-disable-next-line
import * as loginService from '@/api/login'
// eslint-disable-next-line
import { BasicLayout, BlankLayout, PageView, RouteView } from '@/layouts'
import { Icon } from 'ant-design-vue'
// 前端路由表
const constantRouterComponents = {
  // 基础页面 layout 必须引入
  BasicLayout: BasicLayout,
  BlankLayout: BlankLayout,
  RouteView: RouteView,
  PageView: PageView,
  '403': () => import('@/views/exception/403'),
  '404': () => import('@/views/exception/404'),
  '500': () => import('@/views/exception/500'),
  // 应急
  // supplies: () => import('@/views/emergency/resources/supplies'),
  // experts: () => import('@/views/emergency/resources/experts'),
  // medical: () => import('@/views/emergency/agency/medical'),
  // rescue: () => import('@/views/emergency/agency/rescue'),
  // 安监
  overview: () => import('@/views/safety/overview/overview'),
  important: () => import('@/views/safety/important/index'),
  forewarning: () => import('@/views/safety/forewarning/index'),
  organizations: () => import('@/views/safety/organizations/index'),
  accident: () => import('@/views/safety/accident/AccidentManagement'),
  health: () => import('@/views/safety/culture/index'),
  cost: () => import('@/views/safety/culture/index'),
  contractorInfo: () => import('@/views/safety/contractor/contractor'),
  contractorPerson: () => import('@/views/safety/contractor/ContractorPerson'),
  illegalRecords: () => import('@/views/safety/contractor/LawlessRecords'),
  alteration: () => import('@/views/safety/alteration/AlterationManagement'),
  culture: () => import('@/views/safety/culture/index'),
  administration: () => import('@/views/safety/ticket/ticket'),
  ticketrecord: () => import('@/views/safety/ticket/ticketrecord'),
  taskmanage: () => import('@/views/safety/task/manage'),
  taskadd: () => import('@/views/safety/task/add'),
  taskview: () => import('@/views/safety/task/detail'),
  count: () => import('@/views/exception/building'),
  // rules: undefined,
  law: () => import('@/views/safety/law/law'),
  rules: () => import('@/views/safety/rules/rules'),
  // orientation: undefined,
  orientationplan: () => import('@/views/safety/orientation/orientationplan'),
  examination: () => import('@/views/safety/orientation/examination'),  //培训计划审批

  record: () => import('@/views/safety/orientation/record'),
  certificate: () => import('@/views/safety/orientation/certificate'),
  safeeducation: () => import('@/views/safety/orientation/safeeducation'),
  personneleducation: () => import('@/views/safety/orientation/personneleducation'), // 个人台账管理
  safeduQuestionBank: () => import('@/views/safety/orientation/safeduQuestionBank'), // 安全教育题库
  testPaperManagement: () => import('@/views/safety/orientation/testPaperManagement'), // 安全教育试卷管理
  workplan: () => import('@/views/safety/schedule/workplan'),
  workrecord: () => import('@/views/safety/schedule/workrecord'),
  inspectionplan: () => import('@/views/safety/schedule/inspectionplan'),
  inspectionrecord: () => import('@/views/safety/schedule/inspectionrecord'),
  hazop: () => import('@/views/safety/risk/hazop'),
  areaMgmt: () => import('@/views/safety/risk/Area'),
  level: () => import('@/views/safety/risk/Level'),
  evaluation: () => import('@/views/safety/risk/evaluation'),  //风险评价方法设置
  work: () => import('@/views/safety/risk/workrisk'),
  equipment: () => import('@/views/safety/risk/equipment'),
  technology: () => import('@/views/safety/risk/technology'),
  statistic: () => import('@/views/exception/building'),
  matrix: () => import('@/views/exception/building'),
  // fill: () => import('@/views/safety/potentialrisk/fill'),
  reform: () => import('@/views/safety/potentialrisk/reformViewNew'),
  investigation: () => import('@/views/safety/potentialrisk/riskReport'),

  planManage: () => import('@/views/safety/potentialrisk/planManage'),
  checkoutManage: () => import('@/views/safety/potentialrisk/checkoutManage'),
  riskReport: () => import('@/views/safety/potentialrisk/riskReport'),

  evaluate: () => import('@/views/safety/potentialrisk/assess'),
  reformview: () => import('@/views/safety/potentialrisk/acceptance'),
  riskAcceptance: () => import('@/views/safety/potentialrisk/acceptance'),
  registry: () => import('@/views/safety/potentialrisk/3registry'),
  deal: () => import('@/views/safety/potentialrisk/deal'),
  chemicals: () => import('@/views/safety/potentialrisk/chemicals'),

  // reformview: () => import('@/views/exception/building'),
  meetings: () => import('@/views/safety/observation/Meeting'),
  activity: () => import('@/views/safety/observation/Activity'),
  accidentexpress: () => import('@/views/safety/accident/accidentExpress'),
  accidentnearmiss: () => import('@/views/safety/accident/accidentNearmiss'),
  accidentreport: () => import('@/views/safety/accident/accidentReport'),
  accidentprocess: () => import('@/views/safety/accident/accidentProcess'),
  accidentarchive: () => import('@/views/safety/accident/accidentArchive'),
  //commitment
  commitmentModelPerson: () => import('@/views/safety/commitment/commitmentModelPerson'),  //个人安全承诺模板
  targetResponsibility: () => import('@/views/safety/commitment/targetResponsibility'),  //安全承诺与目标责任状
  enterprise: () => import('@/views/safety/commitment/enterprise'),  //企业安全承诺
  maintenance: () => import('@/views/safety/commitment/maintenance'),  //企业安全承诺维护
  //cost
  costPlan: () => import('@/views/safety/cost/costPlan'),  //安全费用计划管理
  costReceive: () => import('@/views/safety/cost/costReceive'),  //安全费用领用管理
  costStatistic: () => import('@/views/safety/cost/costStatistic'),  //安全费用统计


  // administration: undefined,
  // count: undefined,
  // ticketappointment: undefined,
  // ticketrecord: undefined,
  // contractor: undefined,
  // alteration: undefined,
}

// 前端未找到页面路由（固定不用改）
const notFoundRouter = {
  path: '*', redirect: '/404', hidden: true
}

// 根级菜单
const rootRouter = {
  key: '',
  name: 'index',
  path: '',
  component: 'BasicLayout',
  redirect: '/system',
  meta: {
    title: '首页'
  },
  children: []
}


const staticMenus = [
  {
    code: 'potentialrisk',
    appendMenus: [
    // {
    //   code: 'planManage',
    //   path: '/safety/potentialrisk/planManage',
    //   name: '隐患排查计划管理',
    //   alias: 'menu',
    //   source: "iconfont icon-caidanguanli"
    // },
    // {
    //   code: 'checkoutManage',
    //   path: '/safety/potentialrisk/checkoutManage',
    //   name: '隐患排查',
    //   alias: 'menu',
    //   source: "iconfont icon-caidanguanli"
    // },
    // {
    //   code: 'riskReport',
    //   path: '/safety/potentialrisk/report',
    //   name: '隐患上报',
    //   alias: 'menu',
    //   source: "iconfont icon-caidanguanli"
    // },

    // {
    //   code: 'riskAssess',
    //   path: '/safety/potentialrisk/assess',
    //   name: '隐患评估',
    //   alias: 'menu',
    //   source: "iconfont icon-caidanguanli"
    // },
    // {
    //   code: 'riskAcceptance',
    //   path: '/safety/potentialrisk/acceptance',
    //   name: '隐患验收',
    //   alias: 'menu',
    //   source: "iconfont icon-caidanguanli"
    // },
    // {
    //   code: 'illegalOfRegistration',
    //   path: '/safety/potentialrisk/illegalOfRegistration',
    //   name: '三违登记',
    //   alias: 'menu',
    //   source: "iconfont icon-caidanguanli"
    // },
    // {
    //   code: 'illegalHandle',
    //   path: '/safety/potentialrisk/illegalHandle',
    //   name: '三违处理',
    //   alias: 'menu',
    //   source: "iconfont icon-caidanguanli"
    // },
    // {
    //   code: 'dangerousMange',
    //   path: '/safety/potentialrisk/dangerousMange',
    //   name: '危化品管理',
    //   alias: 'menu',
    //   source: "iconfont icon-caidanguanli"
    // }
    ]
  }
];

const appendRoutes = (routes = []) => {
  const host = location.hostname
  const isDev = host && host.includes('localhost');
  if (isDev && routes.length > 0 && routes[0].children.length > 0) {
    const children = routes[0].children;
    staticMenus.forEach(x => {
      const menus = children.find(c => {
        return c.code === x.code;
      });
      if (menus) {
        // menus.children = [...x.appendMenus, ...menus.children];
        const newMenus = [];
        x.appendMenus.forEach(newMenu => {
          const m = menus.children.find(menu => {
            return menu.path === newMenu.path
          });
          if (!m) {
            // newMenus.push(newMenu);
            menus.children.unshift(newMenu);
          }
        });
        // if (newMenus.length > 0) {
        //   menus.children = [...newMenus, ...menus.children];
        // }
      }
    });

  }
  return routes
}

/**
* 动态路由处理
* @param menuId
* @return {Promise<Router>}
* */
export const dynamicRouter = (menuId) => {
  return new Promise((resolve, reject) => {
    loginService.getUserMenu({ id: menuId }).then(res => {
      const result = appendRoutes(res.data) // res.data //
      const routers = generatorRouterTree(result)
      routers.push(notFoundRouter)
      resolve(routers)
    }).catch(err => {
      reject(err)
    })
  })
}

/**
 * 处理树形结构菜单数据 生成 vue-router 层级路由表
 *
 * @param routerMap
 * @param parent
 * @returns {*}
 */
export const generatorRouterTree = (routerMap, parent) => {
  return routerMap.map(item => {
    if (item.alias === 'menu') {
      const myIcon = {
        name: 'myIcon',
        props: {
          attrs: ''
        },
        computed: {
          style: () => item.source
        },
        render: function render(h) {
          return h('i', {
            attrs: this.attrs,
            class: this.style
          })
        }
      }
      const router = {
        name: item.code || '',
        path: item.path || `${parent && parent.path || ''}/${item.name}`,
        meta: {
          title: item.name || '',
          icon: item.source ? myIcon : ''
        },
        hidden: typeof item.isShow === 'undefined' ? false : item.isShow
      }
      if (!parent) {
        router.component = constantRouterComponents['BasicLayout']
      } else {
        if (item.children && item.children.length > 0) {
          router.component = constantRouterComponents['RouteView']
        } else {
          if (item.code && item.code.startsWith('@')) {
            router.component = () => import(`@/${item.code.split('@/')[1]}`)
          } else {
            router.component = (constantRouterComponents[item.code]) || undefined
          }
        }
      }
      if (!router.path.startsWith('http')) {
        router.path = router.path.replace('//', '/')
      }
      if (item.children && item.children.length > 0) {
        // 对主菜单添加redirect 设置为下级的第一个菜单路由
        router.redirect = item.children[0].path
        // 递归子菜单
        router.children = generatorRouterTree(item.children, router)
      }
      return router
    }
  })
}
