import axios from 'axios'
import store from '@/store'
// import notification from 'ant-design-vue/es/notification'
// import { VueAxios } from './axios'
import website from '@/config/website'
import { BASE64 as Base64 } from '@/utils/base64'
import NProgress from 'nprogress'
// import 'nprogress/nprogress.css'
import { getToken } from '@/utils/auth'
// import { Modal } from 'ant-design-vue'

// const request = axios.create({
//   // API 请求的默认前缀
//   // baseURL: 'http://localhost:8080',
//   // baseURL: 'http://47.96.37.79:8111',
//   baseURL: '/api',
//   timeout: 100000 // 请求超时时间
// })

// 跨域请求，允许保存cookie
axios.defaults.withCredentials = true
// NProgress 配置
NProgress.configure({
  showSpinner: false
})

// 异常拦截处理器
const errorHandler = (error) => {
  NProgress.done()
  if (error.response) {
    const data = error.response.data
    // 从 localstorage 获取 token
    // const token = storage.get(ACCESS_TOKEN)
    if (error.response.status === 403) {
      // notification.error({
      //   message: 'Forbidden',
      //   description: data.message
      // })
      this.$message.error(data.message)
    }
    if (error.response.status === 401) {
      // notification.error({
      //   message: '账号信息过期',
      //   description: '请重新登录'
      // })
      console.log(error.response.data)
      store.dispatch('FedLogout').then(() => {
        // window.location.href = 'http://47.96.37.79/page/login/login.html'
      })
      // Modal.confirm({
      //   title: '提示',
      //   content: '当前账号信息已过期，请重新登录',
      //   okText: '确定',
      //   okType: 'danger',
      //   onOk() {
      //     store.dispatch('FedLogout').then(() => {
      //       window.location.href = 'http://47.96.37.79/page/login/login.html'
      //     })
      //   }
      // })
    }
  }
  return Promise.reject(error)
}

// request interceptor
axios.interceptors.request.use(config => {
  NProgress.start()
  // const token = storage.get(ACCESS_TOKEN)
  const meta = (config.meta || {})
  config.headers['Authorization'] = `Basic ${Base64.encode(`${website.clientId}:${website.clientSecret}`)}`
  // config.headers['Content-Type'] = 'application/x-wwww-form-urlencoded'
  if (getToken() !== '') {
    config.headers[website.tokenHeader] = 'bearer ' + getToken()
  }
  // const token = getStore({ name: 'access_token' })
  // if ( token !== '') {
  //   config.headers[website.tokenHeader] = 'bearer ' + token
  // }
  if (config.text === true) {
    config.headers['Content-Type'] = 'text/plain'
  }
  // 序列化
  if (config.method === 'post' && meta.isSerialize === true) {
    console.log('序列化')
    const data = config.data
    const list = []
    Object.keys(data).forEach(ele => {
      list.push(`${ele}=${data[ele]}`)
    })
    config.data = list.join('&')
  }
  // config.headers['Access-Control-Allow-Origin'] = '*'
  // config.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
  // config.headers['Access-Control-Allow-Headers'] = '*'
  // console.log(config.headers)
  return config
}, errorHandler)

// response interceptor
axios.interceptors.response.use((response) => {
  NProgress.done()
  return response
}, errorHandler)

/**
 * get方法，对应get请求
 * @param {String} url [请求的url地址]
 * @param {Object} params [请求时携带的参数]
 */
export function get (url, params) {
  params = params || {}
  return new Promise((resolve, reject) => {
    axios
      .get(url, {
        params: params
      })
      .then(res => {
        resolve(res.data)
      })
      .catch(err => {
        reject(err.data)
      })
  })
}
export default axios
