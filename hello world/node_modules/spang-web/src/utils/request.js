import axios from 'axios'
import store from '@/store'
import notification from 'ant-design-vue/es/notification'
import { VueAxios } from './axios'
import website from '@/config/website'
import { BASE64 as Base64 } from '@/utils/base64'
import NProgress from 'nprogress'
import 'nprogress/nprogress.css'
import { getToken } from '@/utils/auth'
// import { Modal } from 'ant-design-vue'
import router from '@/router'

const request = axios.create({
  // API 请求的默认前缀
  // baseURL: 'http://localhost:8080',
  // baseURL: 'http://172.17.10.170:8111',
  baseURL: process.env.VUE_APP_API_BASE_URL,
  timeout: 100000 // 请求超时时间
})

// 跨域请求，允许保存cookie
axios.defaults.withCredentials = true
// NProgress 配置
NProgress.configure({
  showSpinner: false
})

// 异常拦截处理器
const errorHandler = (error) => {
  NProgress.done()
  if (error.response) {
    const data = error.response.data
    // 从 localstorage 获取 token
    // const token = storage.get(ACCESS_TOKEN)
    if (error.response.status === 403) {
      notification.error({
        message: 'Forbidden',
        description: data.message
      })
    }
    if (error.response.status === 401) {
      // notification.error({
      //   message: '没有权限',
      //   description: '请重新登录'
      // })
      // router.push({path: '/404'})
      store.dispatch('FedLogout').then(() => {
        router.push({ path: '/user/login' })
      })
      // Modal.confirm({
      //   title: '提示',
      //   content: '当前账号信息已过期，请重新登录',
      //   okText: '确定',
      //   okType: 'danger',
      //   onOk() {
      //     store.dispatch('FedLogout').then(() => {
      //       window.location.href = website.loginPath
      //     })
      //   }
      // })
    }
  }
  return Promise.reject(error)
}

// request interceptor
request.interceptors.request.use(config => {
  NProgress.start()
  // const token = storage.get(ACCESS_TOKEN)
  const meta = (config.meta || {})
  config.headers['Authorization'] = `Basic ${Base64.encode(`${website.clientId}:${website.clientSecret}`)}`
  // config.headers['Content-Type'] = 'application/x-wwww-form-urlencoded'
  if (getToken() !== '') {
    config.headers[website.tokenHeader] = 'bearer ' + getToken()
  }
  // const token = getStore({ name: 'access_token' })
  // if ( token !== '') {
  //   config.headers[website.tokenHeader] = 'bearer ' + token
  // }
  if (config.text === true) {
    config.headers['Content-Type'] = 'text/plain'
  }
  // 序列化
  if (config.method === 'post' && meta.isSerialize === true) {
    // console.log('序列化')
    const data = config.data
    const list = []
    Object.keys(data).forEach(ele => {
      list.push(`${ele}=${data[ele]}`)
    })
    config.data = list.join('&')
  }
  // config.headers['Access-Control-Allow-Origin'] = '*'
  // config.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
  // config.headers['Access-Control-Allow-Headers'] = '*'
  // console.log(config.headers)
  return config
}, errorHandler)

// response interceptor
request.interceptors.response.use((response) => {
  // console.log(response)
  NProgress.done()
  return response.data
}, errorHandler)

const installer = {
  vm: {},
  install (Vue) {
    Vue.use(VueAxios, request)
  }
}

export default request

export {
  installer as VueAxios,
  request as axios
}
