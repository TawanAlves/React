const tableDirective = {
  componentUpdated: function (el, binding) {
    const tableBody = el.querySelector('.ant-table .ant-table-body')
    const fixedRightTable = el.querySelector('.ant-table .ant-table-fixed-right .ant-table-body-inner')
    const maxHeight = tableBody.style.maxHeight
    let tableBodyHeight = 0
    if (maxHeight.indexOf('-') > 0) {
      const scrollHeight = parseInt(maxHeight.split('-')[1].trim().replace('px', '').replace(')', ''))
      tableBodyHeight = document.body.clientHeight - scrollHeight
    } else {
      tableBodyHeight = parseInt(maxHeight)
    }
    tableBody.style.maxHeight = tableBodyHeight + 'px'
    if (fixedRightTable) {
      fixedRightTable.style.maxHeight = tableBodyHeight + 'px'
    }
      setTimeout(() => {
        const tbodyHeight = el.querySelector('.ant-table .ant-table-tbody').offsetHeight
        if (tbodyHeight && tbodyHeight > 17) {
          tableBody.style.minHeight = tableBodyHeight + 'px'
          if (fixedRightTable) {
             fixedRightTable.style.minHeight = tableBodyHeight + 'px'
          }
          if (tbodyHeight < tableBodyHeight) {
            el.classList.add('scroll-visibility-hidden')
            tableBody.style.overflowY = 'hidden'
            if (fixedRightTable) {
              fixedRightTable.style.overflowY = 'hidden'
            }
          } else {
            el.classList.remove('scroll-visibility-hidden')
            tableBody.style.overflowY = 'scroll'
            if (fixedRightTable) {
              fixedRightTable.style.overflowY = 'scroll'
            }
          }
          tableBody.style.overflowX = 'auto'
        } else {
          const table = tableBody.querySelector('.ant-table-fixed')
          tableBody.style.minHeight = 'auto'
          if (fixedRightTable) {
            fixedRightTable.style.minHeight = 'auto'
          }
          if (table) {
            table.style.minHeight = '17px'
          }
        }
      })
  }
}

export default tableDirective
