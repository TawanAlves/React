import request from '@/utils/request'

export const safetyApi = {
  EnterpriseCanvass: '/spang-safety/safety/enterprise/canvass',
  EnterpriseCanvassDetail: '/spang-safety/safety/enterprise/canvass-detail',
  // promise
  PromiseList: '/spang-safety/safety/promise/page',
  PromiseListDetail: '/spang-safety/safety/promise/detail',
  // organizations
  OrganizationsDangerLevel: '/spang-safety/safety/major-dangsrc/level',
  OrganizationsDangerType: '/spang-safety/safety/major-dangsrc/type',
  OrganizationsDangerList: '/spang-safety/safety/major-dangsrc/page',
  OrganizationsDangerRegion: '/safety/organizations/dangersource/regionoptions',
  // personnel
  OrganizationPersonnelUser: '/spang-system/page',
  OrganizationPersonnelTree: '/spang-system/dept/tree',
  UserSearch: '/spang-system/like',
  // region
  RegionMajorTree: '/spang-safety/safety/area/parent-directory',
  RegionMajorTreeChild: '/spang-safety/safety/area/child-directory',
  RegionList: '/spang-safety/safety/area/page',
  RegionTree: '/spang-safety/safety/area/directory',
  RegionTreeChild: '/spang-safety/safety/area/directory-child',
  // forewarning
  ForewarningList: '/spang-safety/safety/alarm-event/list',
  ForewarningListDetail: '/spang-safety/safety/alarm-event/detail',
  ForewarningCommunication: '/spang-safety/safety/alarm-communication/save',
  ForewarningClosedLoop: '/spang-safety/safety/alarm-end/save',
  ForewarningIsEffective: '/spang-safety/safety/alarm-event/update',
  // forewarning select options
  ForewarningEffective: '/spang-safety/safety/alarm-event/alarm-effective/list',
  ForewarningStatus: '/spang-safety/safety/alarm-event/alarm-status/list',
  ForewarningThreshold: '/spang-safety/safety/alarm-event/alarm-threshold/list',
  ForewarningType: '/spang-safety/safety/alarm-event/alarm-type/list',
  ForewarningSubType: '/spang-safety/safety/alarm-event/alarm-subtype/list',
  ForewarningLevel: '/spang-safety/safety/alarm-event/alarm-level/list',
  ForewarningEndMode: '/spang-safety/safety/alarm-event/end-mode/list',
  ForewarningEndReason: '/spang-safety/safety/alarm-event/end-reason/list',
  ForewarningCommunicationMode: '/spang-safety/safety/alarm-event/communication-mode/list',

  // law
  LawFileType: '/spang-safety/safety/law/find-type-dic ',
  LawFileEffective: '/spang-safety/safety/law/find-effect-dic',
  LawList: '/spang-safety/safety/law/list-conditions',
  LawListDetail: '/spang-safety/safety/law/detail',
  LawListRemove: '/spang-safety/safety/law/remove',
  LawListSubmit: '/spang-safety/safety/law/submit',
  // Alteration
  AlterationList: '/spang-safety/safety/change/page',
  SubmitAlterationItem: '/spang-safety/safety/change/submit',
  DeleteAlteration: '/spang-safety/safety/change/remove',
  AlterationType: '/spang-safety/safety/change/changeType',
  AlterationLevel: '/spang-safety/safety/change/changeLevel',

  // Accident
  AccidentList: '/spang-safety/safety/accident/page',
  SubmitAccidentItem: '/spang-safety/safety/accident/submit',
  DeleteAccident: '/spang-safety/safety/accident/remove',
  AccidentType: '/spang-safety/safety/accident/accidentType',
  AccidentLevel: '/spang-safety/safety/accident/accidentLevel',

  ContractorList: '/spang-safety/contractor/page',
  ContractorListNoPage: '/spang-safety/contractor/list',
  SubmitContractorItem: '/spang-safety/contractor',
  DeleteContractor: '/spang-safety/contractor',
  DeleteContractorPerson: '/spang-safety/contractor/user',
  SubmitContractorPerson: '/spang-safety/contractor/user',
  ContractorPersonList: '/spang-safety/contractor/user/page',
  ContractorIllegalList: '/spang-safety/contractor/record/page',
  GetCostList: '/spang-safety/safety/costs/page',
  SubmitCostItem: '/spang-safety/safety/costs/submit',
  DeleteCost: '/spang-safety/safety/costs/remove',
  GetHealthList: '/spang-safety/safety/occupational-health/page',
  SubmitHealthItem: '/spang-safety/safety/occupational-health/submit',
  DeleteHealth: '/spang-safety/safety/occupational-health/remove',
  GetCultureList: '/spang-safety/safety/culture/page',
  SubmitCultureItem: '/spang-safety/safety/culture/submit',
  DeleteCulture: '/spang-safety/safety/culture/remove',
  // rules
  RulesFileEffective: '/spang-safety/safety/management-system/file-effective/list',
  RulesFileType: '/spang-safety/safety/management-system/file-type/list',
  RulesList: '/spang-safety/securitysystem/systemmgmt/getPageList',
  RulesListRemove: '/spang-safety/safety/management-system/remove',
  RulesListDetail: '/spang-safety/safety/management-system/detail',
  RulesListSubmit: '/spang-safety/securitysystem/systemmgmt',
  // orientation
  // plan
  OriPlanList: '/spang-safety/safety/training/plan/page',
  OriPlanListDetail: '/spang-safety/safety/training/plan/detail',
  OriPlanListRemove: '/spang-safety/safety/training/plan/remove',
  OriPlanListSubmit: '/spang-safety/safety/training/plan/submit',
  OriPlanExecuteType: '/spang-safety/safety/training/plan/execute-type',
  OriPlanStatus: '/spang-safety/safety/training/plan/status-list',
  OriPlanApprove: '/spang-safety/safety/training/plan/complete-task',
  OriPlanTodoList: '/spang-safety/safety/training/plan/todo-list',
  OriPlanRevoke: '/spang-safety/safety/training/plan/revoke-task',
  OriPlanSendList: '/spang-safety/safety/training/plan/send-list',
  // record
  RecordList: '/spang-safety/safety/training/record/page',
  RecordListSubmit: '/spang-safety/safety/training/record/save',
  RecordListDetail: '/spang-safety/safety/training/record/detail',
  RecordListRemove: '/spang-safety/safety/training/record/remove',
  // certificate
  CertificateList: '/spang-safety/safetyedu/specialcertificate/getPageListForTicket',
  CertificateListAll: '/spang-safety/safetyedu/specialcertificate/getPageList',
  CertificateListSubmit: '/spang-safety/safetyedu/specialcertificate',
  publishCertificate: '/spang-safety/safetyedu/specialcertificate/updateIssueById',
  CertificateListDetail: '/spang-safety/safetyedu/specialcertificate',
  CertificateListRemove: '/spang-safety/safetyedu/specialcertificate',
  CertificateType: '/spang-safety/safety/special-certificate/certificate-type',
  // safety education
  EducateList: '/spang-safety/safety/tertiaryEducation/page',
  EducateType: '/spang-safety/safety/tertiaryEducation/educate-type',
  EducateListSubmit: '/spang-safety/safety/tertiaryEducation/submit',
  EducateListDetail: '/spang-safety/safety/tertiaryEducation/detail',
  EducateListRemove: '/spang-safety/safety/tertiaryEducation/remove',
  // person education
  PersonEduList: '/spang-safety/safety/person-eduction-record/page',
  PersonEduCertificate: '/spang-safety/safety/person-eduction-record/certificate/list',
  PersonEduEducation: '/spang-safety/safety/person-eduction-record/tertiary-education/list',
  // schedule
  WorkType: '/spang-safety/safety/work-plan/work-type/list',
  InspectionType: '/spang-safety/safety/examine-plan/type/list',
  // work plan
  WorkPlanList: '/spang-safety/safety/work-plan/page',
  WorkPlanListSubmit: '/spang-safety/safety/work-plan/submit',
  WorkPlanListRemove: '/spang-safety/safety/work-plan/remove',
  WorkPlanListDetail: '/spang-safety/safety/work-plan/detail',
  WorkPlanApprove: '/spang-safety/safety/work-plan/complete-task',
  WorkPlanTodoList: '/spang-safety/safety/work-plan/todo-list',
  WorkPlanRevoke: '/spang-safety/safety/work-plan/revoke-task',
  WorkPlanSendList: '/spang-safety/safety/work-plan/send-list',
  WorkPlanService: '/spang-safety/discovery/service',
  WorkPlanFlowType: '/spang-snaker/list',
  WorkPlanProcessList: '/spang-snaker/snaker-flow/process/list',
  WorkPlanProcessForm: '/spang-snaker/dynamic-form/process',
  StartProcessTask: '/spang-safety/safety/work-plan/submit',

  // work record
  WorkRecordList: '/spang-safety/safety/work-record/page',
  WorkRecordListSubmit: '/spang-safety/safety/work-record/submit',
  WorkRecordListRemove: '/spang-safety/safety/work-record/remove',
  WorkRecordListDetail: '/spang-safety/safety/work-record/detail',
  // inspection plan
  InspectionPlanList: '/spang-safety/safety/examine-plan/page',
  InspectionPlanListSubmit: '/spang-safety/safety/examine-plan/submit',
  InspectionPlanListRemove: '/spang-safety/safety/examine-plan/remove',
  InspectionPlanListDetail: '/spang-safety/safety/examine-plan/detail',
  InspectionPlanApprove: '/spang-safety/safety/examine-plan/complete-task',
  InspectionPlanTodoList: '/spang-safety/safety/examine-plan/todo-list',
  InspectionPlanRevoke: '/spang-safety/safety/examine-plan/revoke-task',
  InspectionPlanSendList: '/spang-safety/safety/examine-plan/send-list',
  // inspection record
  InspectionRecordList: '/spang-safety/safety/examine-record/page',
  InspectionRecordListSubmit: '/spang-safety/safety/examine-record/submit',
  InspectionRecordListRemove: '/spang-safety/safety/examine-record/remove',
  InspectionRecordListDetail: '/spang-safety/safety/examine-record/detail',
  // risk
  RiskEvaluationLevel: '/spang-safety/safety/risk-common/evaluationLevelList',
  RiskControlLevel: '/spang-safety/safety/risk-common/controlLevelList',
  RiskL: '/spang-safety/safety/risk-common/lLevelList',
  RiskS: '/spang-safety/safety/risk-common/sLevelList',
  RiskR: '/spang-safety/safety/risk-common/getR',
  CalculateRiskEvaluationLevel: '/spang-safety/safety/risk-common/getEvaluationLevel',
  CalculateRiskControlLevel: '/spang-safety/safety/risk-common/getControlLevel',
  //evaluation risk
  submitEvaluationList1: '/spang-safety/risk/setup/accidenthappen',
  deleteEvaluation1: '/spang-safety/risk/setup/accidenthappen',
  submitEvaluationList2: '/spang-safety/risk/setup/accidentserious',
  deleteEvaluation2: '/spang-safety/risk/setup/accidentserious',
  submitEvaluationList3: '/spang-safety/risk/setup/accidentjudge',
  deleteEvaluation3: '/spang-safety/risk/setup/accidentjudge',
  submitEvaluationList4: 'spang-safety/risk/setup/controllevel/updateScore',


  // hazop
  HazopList: '/spang-safety/safety/risk-hazop/page',
  HazopListDetail: '/spang-safety/safety/risk-hazop/detail',
  HazopListRemove: '/spang-safety/safety/risk-hazop/remove',
  HazopListSubmit: '/spang-safety/safety/risk-hazop/submit',
  //  work risk
  WorkRiskList: '/spang-safety/safety/risk-work/page',
  WorkRiskListSubmit: '/spang-safety/safety/risk-work/submit',
  WorkRiskListRemove: '/spang-safety/safety/risk-work/remove',
  WorkRiskListDetail: '/spang-safety/safety/risk-work/detail',
  // technology
  TechnologyList: '/spang-safety/safety/risk-process/page',
  TechnologyListDetail: '/spang-safety/safety/risk-process/detail',
  TechnologyListRemove: '/spang-safety/safety/risk-process/remove',
  TechnologyListSubmit: '/spang-safety/safety/risk-process/submit',
  // equipment
  EquipmentList: '/spang-safety/safety/risk-facility/page',
  EquipmentListDetail: '/spang-safety/safety/risk-facility/detail',
  EquipmentListRemove: '/spang-safety/safety/risk-facility/remove',
  EquipmentListSubmit: '/spang-safety/safety/risk-facility/submit',
  // potential risk
  PotentialRiskType: '/spang-safety/safety/peril/type/list',
  PotentialRiskLevel: '/spang-safety/safety/peril/level/list',
  AbarbeitungType: '/spang-safety/safety/peril/abarbeitung-type/list',
  PotentialRiskPlan: '/spang-safety/peril/plan/page',
  // task
  TaskType: '/spang-safety/safety/task-ticket-base/type/list',
  TaskStatus: '/spang-safety/safety/task-ticket-base/status/list',
  TaskHotLevel: '/spang-safety/safety/task-ticket-base/hot-level/list',
  TaskBlindType: '/spang-safety/safety/task-ticket-base/blind-type/list',
  TaskHignCategory: '/spang-safety/safety/task-ticket-base/high-category/list',
  TaskHoistingLevel: '/spang-safety/safety/task-ticket-base/hoisting-level/list',
  // ticket
  TaskList: '/spang-safety/tickets/common/loadAllTicketsList',
  TaskListSubmit: '/spang-safety/safety/task-ticket-base/save',
  TaskListRemove: '/spang-safety/safety/task-ticket-base/remove',
  TaskListDetail: '/spang-safety/safety/task-ticket-base/detail',
  TicketSearchList: '/spang-safety/tickets/common/tickets',
  getPCTaskList: '/spang-safety/tickets/common/pc-tickets',
  TaskOther: '/spang-safety/basic-information/page',
  TaskTodoList: '/spang-safety/safety/task-ticket-base/todo-list',
  TaskApprove: '/spang-safety/safety/task-ticket-base/complete-task',
  TaskRevoke: '/spang-safety/safety/task-ticket-base/revoke-task',
  TaskStats: '/spang-safety/safety/task-ticket-base/count',
  // ticket record
  TaskRecordList: '/spang-safety/safety/task-ticket-base/record',
  // TODO 修改动火负责人
  changeTaskCharger: '',
  // TODO 获取人员列表
  TaskPersons: '',
  // TODO 作业单位添加人员信息
  addTaskPerson: '',
  // TODO 作业单位删除人员信息
  deleteTaskPerson: '',
  // TODO 获取安全交底详情
  getSafetyClarification: '',
  // TODO 获取动火分析历史详情
  getLaboratoryAnalysis: '',
  // TODO 获取部门选项
  getUnits: '',
  // todo 获取风险辨识结果
  getRiskResult: '',
  // reform
  ReformList: '/spang-safety/safety/peril/page',
  ReformListDetail: '/spang-safety/safety/peril/detail',
  ReformListSubmit: '/spang-safety/safety/peril/submit',
  ReformListRemove: '/spang-safety/safety/peril/remove',
  ReformStatsList: '/spang-safety/safety/peril/summary/list',
  ReformHistoryList: '/spang-safety/safety/peril/summary/history/list',
  ReformListAbarbeitung: '/spang-safety/safety/peril-abarbeitung-info/detail',
  ReformItemDelay: '/spang-safety/safety/peril/flow/delay',
  ReformItemComplete: '/spang-safety/safety/delay-info-approve/complete',
  ReformDelayInfo: '/spang-safety/safety/peril-delay-info/info',
  ReformDelayApprove: '/spang-safety/safety/peril/flow/delay-approve',
  ReformApproveInfo: '/spang-safety/safety/delay-info-approve/find-By-Peril-Id',
  ReformItemRectify: '/spang-safety/safety/peril/flow/rectify',
  ReformItemRecheck: '/spang-safety/safety/peril/flow/recheck',
  ReformTodoList: '/spang-safety/safety/peril/todo-list',
  // investigation
  InvestList: '/spang-safety/safety/peril/page',
  InvestListDetail: '/spang-safety/safety/peril/detail',
  InvestListSubmit: '/spang-safety/safety/peril/submit',
  InvestListRemove: '/spang-safety/safety/peril/remove',

  // flow 工作流
  FlowHistoryList: '/spang-flow/process/history-flow-list',
  FlowDiagram: '/spang-flow/process/diagram-view',

  // file upload
  FileUpLoad: '/spang-safety/fileserver/fileUpload',
  FileDownload: '/spang-resource/oss/endpoint/file-link',

  // realtime data
  RealtimeList: 'spang-safety/safety/major/currentValue',

  // new file upload
  fileUploadNew: '/spang-safety/fileserver/fileUpload',

  // 获取风险点List 数据
  getRiskPointListData: '/spang-safety/risk/pointslist/getPageList', // '/spang-safety/risk/pointslist/workactivity/main/getPageList',

  getCheckoutListData: '/spang-safety/peril/check/page',
  getRiskUploadListData: '/spang-safety/peril/report/page',
  getRiskAssessListData: '/spang-safety/peril/assess/page',
  getRiskReformListData: '/spang-safety/peril/abarbeitung/page',
  getRiskAcceptanceListData: '/spang-safety/peril/accept/page',

}

export function getCheckoutListData(parameter) {
  return request({
    url: safetyApi.getCheckoutListData,
    method: 'get',
    params: {
      ...parameter
    }
  })
}

export function getRiskAcceptanceListData(parameter) {
  return request({
    url: safetyApi.getRiskAcceptanceListData,
    method: 'get',
    params: {
      ...parameter
    }
  })
}

export function getRiskReformListData(parameter) {
  return request({
    url: safetyApi.getRiskReformListData,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export function getRiskAssessListData(parameter) {
  return request({
    url: safetyApi.getRiskAssessListData,
    method: 'get',
    params: {
      ...parameter
    }
  })
}

export function getRiskPointListData(parameter) {
  return request({
    url: safetyApi.getRiskPointListData,
    method: 'get',
    params: {
      ...parameter
    }
  })
}

export function getRiskUploadListData(parameter) {
  return request({
    url: safetyApi.getRiskUploadListData,
    method: 'get',
    params: {
      ...parameter
    }
  })
}

export function getEnterpriseCanvass() {
  return request({
    url: safetyApi.EnterpriseCanvass,
    method: 'get'
    // params: {
    //   ...parameter
    // }
  })
}
export function getEnterpriseCanvassDetail(parameter) {
  return request({
    // headers: {
    //   'Content-Type': 'application/json;charset=UTF-8'
    // },
    url: safetyApi.EnterpriseCanvassDetail,
    method: 'post',
    // data: parameter
    params: {
      ...parameter
    }
  })
}

export function getDangerList(parameter) {
  return request({
    url: safetyApi.OrganizationsDangerList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export function getRegionOptions() {
  return request({
    url: safetyApi.OrganizationsDangerRegion,
    method: 'get'
  })
}

// important
export const getRegionMajorTree = (parameter) => {
  return request({
    url: safetyApi.RegionMajorTree,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const getRegionMajorTreeChild = (parentId) => {
  return request({
    url: safetyApi.RegionMajorTreeChild,
    method: 'get',
    params: {
      ...parentId
    }
  })
}
export const getRealtimeList = () => {
  return request({
    url: safetyApi.RealtimeList,
    method: 'get'
  })
}
export const getPromiseList = () => {
  return request({
    url: safetyApi.PromiseList,
    method: 'post'
  })
}
export const detailPromiseList = (id) => {
  return request({
    url: safetyApi.PromiseListDetail,
    method: 'get',
    params: {
      id: id
    }
  })
}

// forewarning
export function getForewarningList(parameter) {
  if ('time' in parameter) {
    parameter.startTime = parameter.time[0]
    parameter.endTime = parameter.time[1]
    delete parameter.time
  }
  return request({
    url: safetyApi.ForewarningList,
    method: 'post',
    params: {
      ...parameter
    }
  })
}
export function getForewarningListDetail(id) {
  return request({
    url: safetyApi.ForewarningListDetail + '/' + id,
    method: 'get'
  })
}
export const changeIsEffective = (parameter) => {
  return request({
    url: safetyApi.ForewarningIsEffective,
    method: 'post',
    data: parameter
  })
}
export const submitCommunication = (parameter) => {
  return request({
    url: safetyApi.ForewarningCommunication,
    method: 'post',
    data: parameter
  })
}
export const submitClosedLoop = (parameter) => {
  return request({
    url: safetyApi.ForewarningClosedLoop,
    method: 'post',
    data: parameter
  })
}
// forewarning selectOptions
export const getAlarmEffective = () => {
  return request({
    url: safetyApi.ForewarningEffective,
    method: 'get'
  })
}
export const getAlarmStatus = () => {
  return request({
    url: safetyApi.ForewarningStatus,
    method: 'get'
  })
}
export const getAlarmLevel = () => {
  return request({
    url: safetyApi.ForewarningLevel,
    method: 'get'
  })
}
export const getAlarmType = () => {
  return request({
    url: safetyApi.ForewarningType,
    method: 'get'
  })
}
export const getAlarmSubType = () => {
  return request({
    url: safetyApi.ForewarningSubType,
    method: 'get'
  })
}
export const getAlarmThreshold = () => {
  return request({
    url: safetyApi.ForewarningThreshold,
    method: 'get'
  })
}
export const getAlarmEndMode = () => {
  return request({
    url: safetyApi.ForewarningEndMode,
    method: 'get'
  })
}
export const getAlarmEndReason = () => {
  return request({
    url: safetyApi.ForewarningEndReason,
    method: 'get'
  })
}
export const getAlarmCommunicationMode = () => {
  return request({
    url: safetyApi.ForewarningCommunicationMode,
    method: 'get'
  })
}
export const foreWarning = { getForewarningList, changeIsEffective, getForewarningListDetail, submitCommunication, submitClosedLoop }
export const alarmSelectOptions = { getAlarmEffective, getAlarmStatus, getAlarmLevel, getAlarmType, getAlarmSubType, getAlarmThreshold, getAlarmEndMode, getAlarmEndReason, getAlarmCommunicationMode }

// law
export function getLawFileEffective() {
  return request({
    url: safetyApi.LawFileEffective,
    method: 'get'
  })
}
export function getLawFileType() {
  return request({
    url: safetyApi.LawFileType,
    method: 'get'
  })
}
export const getLawList = (parameter) => {
  return request({
    url: safetyApi.LawList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const submitLawList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.LawListSubmit,
    method: 'post',
    data: params,
    meta: {
      isisSerialize: true
    }

  })
}
export const detailLawList = (id) => {
  return request({
    url: safetyApi.LawListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeLawList = (ids) => {
  return request({
    url: safetyApi.LawListRemove,
    method: 'post',
    params: {
      ids: ids
    }
  })
}
export const law = { getLawList, submitLawList, removeLawList, detailLawList, getLawFileEffective, getLawFileType }

// organizations
// personnel
export function getPersonnelTree(parameter) {
  return request({
    url: safetyApi.OrganizationPersonnelTree,
    method: 'get',
    params: {
      parentId: parameter
    }
  })
}
export const getPersonnelUser = (parameter) => {
  return request({
    url: safetyApi.OrganizationPersonnelUser,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const searchUser = (parameter) => {
  return request({
    url: safetyApi.UserSearch,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
// region
export const getRegionTree = () => {
  return request({
    url: safetyApi.RegionTree,
    method: 'get'
  })
}
export const getRegionTreeChild = (parentId) => {
  return request({
    url: safetyApi.RegionTreeChild,
    method: 'get',
    params: {
      ...parentId
    }
  })
}
export const getRegionList = (parameter) => {
  return request({
    url: safetyApi.RegionList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
// danger
export const getDangerType = () => {
  return request({
    url: safetyApi.OrganizationsDangerType,
    method: 'get'
  })
}
export const getDangerLevel = () => {
  return request({
    url: safetyApi.OrganizationsDangerLevel,
    method: 'get'
  })
}

// alteration
export function getAlterationList(parameter) {
  return request({
    url: safetyApi.AlterationList,
    method: 'post',
    params: { ...parameter }
  })
}
export function submitAlterationItem(parameter) {
  return request({
    url: safetyApi.SubmitAlterationItem,
    method: 'post',
    data: parameter
  })
}
export function deleteAlteration(parameter) {
  return request({
    url: safetyApi.DeleteAlteration,
    method: 'post',
    params: { ids: parameter }
  })
}
export function getAlterationType() {
  return request({
    url: safetyApi.AlterationType,
    method: 'get'
  })
}
export function getAlterationLevel() {
  return request({
    url: safetyApi.AlterationLevel,
    method: 'get'
  })
}

// accident
export function getAccidentList(parameter) {
  return request({
    url: safetyApi.AccidentList,
    method: 'post',
    params: { ...parameter }
  })
}
export function submitAccidentItem(parameter) {
  return request({
    url: safetyApi.SubmitAccidentItem,
    method: 'post',
    data: parameter
  })
}
export function deleteAccident(parameter) {
  return request({
    url: safetyApi.DeleteAccident,
    method: 'post',
    params: { ids: parameter }
  })
}
export function getAccidentType() {
  return request({
    url: safetyApi.AccidentType,
    method: 'get'
  })
}
export function getAccidentLevel() {
  return request({
    url: safetyApi.AccidentLevel,
    method: 'get'
  })
}

// contractor
export function getContractorList(parameter) {
  return request({
    url: safetyApi.ContractorList,
    method: 'get',
    params: { ...parameter }
  })
}

export function getContractorListNoPage(parameter) {
  return request({
    url: safetyApi.ContractorListNoPage,
    method: 'get',
    params: { ...parameter }
  })
}

export function submitContractorItem(parameter, method, config) {
  return request({
    ...config,
    url: safetyApi.SubmitContractorItem,
    method: method,
    data: parameter
  })
}
export function deleteContractor(parameter) {
  return request({
    // headers: {
    //   'Content-Type': 'application/json;charset=UTF-8'
    // },
    url: safetyApi.DeleteContractor,
    method: 'delete',
    params: { id: parameter }
    // meta: {
    //   isSerialize: true
    // }
  })
}

// 运营商人员信息
export function getContractorPersonList(parameter) {
  return request({
    url: safetyApi.ContractorPersonList,
    method: 'get',
    params: { ...parameter }
  })
}
export function deleteContractorPerson(parameter) {
  return request({
    url: safetyApi.DeleteContractorPerson,
    method: 'delete',
    params: { id: parameter }
  })
}
export function submitContractorPerson(parameter, method, config) {
  return request({
    ...config,
    url: safetyApi.SubmitContractorPerson,
    method: method,
    data: parameter
  })
}

export function getContractorPersonById (id) {
  return request({
    url: safetyApi.DeleteContractorPerson,
    method: 'get',
    params: { id: id }
  })
}
// 运营商违规记录
export function getContractorIllegalList(parameter) {
  return request({
    url: safetyApi.ContractorIllegalList,
    method: 'get',
    params: { ...parameter }
  })
}

// cost
export function getCostList(parameter, pageName) {
  var url = ''
  if (pageName === 'cost') {
    url = safetyApi.GetCostList
  } else if (pageName === 'health') {
    url = safetyApi.GetHealthList
  } else {
    url = safetyApi.GetCultureList
  }

  return request({
    url: url,
    method: 'post',
    params: { ...parameter }
  })
}
export function submitCostItem(parameter, pageName) {
  var url = ''
  if (pageName === 'cost') {
    url = safetyApi.SubmitCostItem
  } else if (pageName === 'health') {
    url = safetyApi.SubmitHealthItem
  } else {
    url = safetyApi.SubmitCultureItem
  }
  return request({
    url: url,
    method: 'post',
    data: parameter
  })
}
export function deleteCost(parameter, pageName) {
  console.log(parameter)
  var url = ''
  if (pageName === 'cost') {
    url = safetyApi.DeleteCost
  } else if (pageName === 'health') {
    url = safetyApi.DeleteHealth
  } else {
    url = safetyApi.DeleteCulture
  }
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: url,
    method: 'post',
    data: parameter
  })
}

// rules
export function getRulesFileEffective() {
  return request({
    url: safetyApi.RulesFileEffective,
    method: 'get'
  })
}
export function getRulesFileType() {
  return request({
    url: safetyApi.RulesFileType,
    method: 'get'
  })
}
export function getRulesList(parameter) {
  return request({
    url: safetyApi.RulesList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const removeRulesList = (ids) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.RulesListRemove,
    method: 'post',
    data: ids,
    meta: {
      isisSerialize: true
    }
  })
}
export const detailRulesList = (id) => {
  return request({
    url: safetyApi.RulesListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const submitRulesList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.RulesListSubmit,
    method: 'post',
    data: params
    // meta: {
    //   isSerialize: true
    // }
  })
}
export const rules = { getRulesFileEffective, getRulesFileType, getRulesList, removeRulesList, detailRulesList, submitRulesList }

// orientation
// .plan
export const getOriPlanList = (parameter) => {
  return request({
    url: safetyApi.OriPlanList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const detailOriPlanList = (id) => {
  return request({
    url: safetyApi.OriPlanListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeOriPlanList = (ids) => {
  return request({
    // headers: {
    //   'Content-Type': 'application/json;charset=UTF-8'
    // },
    url: safetyApi.OriPlanListRemove,
    method: 'post',
    params: {
      ids
    }
  })
}
export const submitOriPlanList = (parameter) => {
  return request({
    url: safetyApi.OriPlanListSubmit,
    method: 'post',
    data: parameter
  })
}
export const getOriPlanExecuteType = () => {
  return request({
    url: safetyApi.OriPlanExecuteType,
    method: 'get'
  })
}
export const getOriPlanStatus = () => {
  return request({
    url: safetyApi.OriPlanStatus,
    method: 'get'
  })
}
export const getOriPlanTodoList = (params) => {
  return request({
    url: safetyApi.OriPlanTodoList,
    method: 'get',
    params: params
  })
}
export const approveOriPlan = (params) => {
  return request({
    url: safetyApi.OriPlanApprove,
    method: 'post',
    data: params
  })
}
export const revokeOriPlan = (params) => {
  return request({
    url: safetyApi.OriPlanRevoke,
    method: 'post',
    data: params
  })
}
export const getOriPlanSendList = (params) => {
  return request({
    url: safetyApi.OriPlanSendList,
    method: 'get',
    params: params
  })
}
export const orientationPlan = { getOriPlanList, detailOriPlanList, removeOriPlanList, submitOriPlanList, getOriPlanExecuteType, getOriPlanStatus, getOriPlanTodoList, approveOriPlan, revokeOriPlan, getOriPlanSendList }
// .record
export const getRecordList = (parameter) => {
  return request({
    url: safetyApi.RecordList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const submitRecordList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.RecordListSubmit,
    method: 'post',
    data: params
  })
}
export const detailRecordList = (id) => {
  return request({
    url: safetyApi.RecordListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeRecordList = (ids) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.RecordListRemove,
    method: 'post',
    data: ids
  })
}
export const record = { getRecordList, submitRecordList, detailRecordList, removeRecordList }
// .certificate
export const getCertificateList = (parameter) => {
  return request({
    url: safetyApi.CertificateList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}

export const getCertificateListAll = (parameter) => {
  return request({
    url: safetyApi.CertificateListAll,
    method: 'get',
    params: {
      ...parameter
    }
  })
}

export const submitCertificateList = (params, method = 'post') => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.CertificateListSubmit,
    method,
    data: params
  })
}
export const publishCertificate = (params) => {
  return request({
    url: safetyApi.publishCertificate,
    method: 'put',
    params
  })
}
export const detailCertificateList = (id) => {
  return request({
    url: safetyApi.CertificateListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeCertificateList = (ids) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.CertificateListRemove,
    method: 'delete',
    data: ids
  })
}
export function getCertificateType() {
  return request({
    url: safetyApi.CertificateType,
    method: 'get'
  })
}
export const certificate = { getCertificateListAll, publishCertificate, getCertificateList, submitCertificateList, detailCertificateList, removeCertificateList, getCertificateType }
// .safety education
export const getEducationType = () => {
  return request({
    url: safetyApi.EducateType,
    method: 'get'
  })
}
export const getEducationList = (parameter) => {
  return request({
    url: safetyApi.EducateList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const submitEducationList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.EducateListSubmit,
    method: 'post',
    data: params
  })
}
export const detailEducationList = (id) => {
  return request({
    url: safetyApi.EducateListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeEducationList = (ids) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.EducateListRemove,
    method: 'post',
    data: ids
  })
}
export const educate = { getEducationType, getEducationList, submitEducationList, detailEducationList, removeEducationList }
// .person education
export const getPersonEduList = (parameter) => {
  return request({
    url: safetyApi.PersonEduList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const getPersonEduCertificate = (personId) => {
  return request({
    url: safetyApi.PersonEduCertificate,
    method: 'get',
    params: {
      personId
    }
  })
}
export const getPersonEduEducation = (personId) => {
  return request({
    url: safetyApi.PersonEduEducation,
    method: 'get',
    params: {
      personId
    }
  })
}
export const personEducation = { getPersonEduList, getPersonEduCertificate, getPersonEduEducation }

// schedule
export const getWorkType = () => {
  return request({
    url: safetyApi.WorkType,
    method: 'get'
  })
}
export const getInspectionType = () => {
  return request({
    url: safetyApi.InspectionType,
    method: 'get'
  })
}
// .work plan
export const getWorkPlanList = (parameter) => {
  return request({
    url: safetyApi.WorkPlanList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const submitWorkPlanList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.WorkPlanListSubmit,
    method: 'post',
    data: params,
    meta: {
      isisSerialize: true
    }
  })
}
export const detailWorkPlanList = (id) => {
  return request({
    url: safetyApi.WorkPlanListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeWorkPlanList = (ids) => {
  return request({
    url: safetyApi.WorkPlanListRemove,
    method: 'post',
    data: ids
  })
}
export const getWorkPlanTodoList = (params) => {
  return request({
    url: safetyApi.WorkPlanTodoList,
    method: 'get',
    params: params
  })
}
export const approveWorkPlan = (params) => {
  return request({
    url: safetyApi.WorkPlanApprove,
    method: 'post',
    data: params
  })
}
export const revokeWorkPlan = (params) => {
  return request({
    url: safetyApi.WorkPlanRevoke,
    method: 'post',
    data: params
  })
}
export const getWorkPlanSendList = (params) => {
  return request({
    url: safetyApi.WorkPlanSendList,
    method: 'get',
    params: params
  })
}
export const getWorkPlanService = (params) => {
  return request({
    url: safetyApi.WorkPlanService,
    method: 'get',
    params: params
  })
}
export const getFlowTypeList = (params) => {
  return request({
    url: safetyApi.WorkPlanFlowType,
    method: 'get',
    params: params
  })
}
export const getWorkPlanProcessList = (params) => {
  return request({
    url: safetyApi.WorkPlanProcessList,
    method: 'get',
    params: params
  })
}
export const getWorkPlanProcessForm = (params) => {
  return request({
    url: safetyApi.WorkPlanProcessForm,
    method: 'get',
    params: params
  })
}
export const startProcessTask = (params) => {
  return request({
    url: safetyApi.StartProcessTask,
    method: 'post',
    data: params
  })
}
export const workPlan = { getWorkPlanList, submitWorkPlanList, detailWorkPlanList, removeWorkPlanList, getWorkPlanTodoList, approveWorkPlan, revokeWorkPlan, getWorkPlanSendList, getWorkPlanService, getFlowTypeList, getWorkPlanProcessList, getWorkPlanProcessForm, startProcessTask }
// .work record
export const getWorkRecordList = (parameter) => {
  return request({
    url: safetyApi.WorkRecordList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const submitWorkRecordList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.WorkRecordListSubmit,
    method: 'post',
    data: params
  })
}
export const detailWorkRecordList = (id) => {
  return request({
    url: safetyApi.WorkRecordListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeWorkRecordList = (ids) => {
  return request({
    url: safetyApi.WorkRecordListRemove,
    method: 'post',
    data: ids
  })
}
export const workRecord = { getWorkRecordList, submitWorkRecordList, detailWorkRecordList, removeWorkRecordList }
// .inspection plan
export const getInspectionPlanList = (parameter) => {
  return request({
    url: safetyApi.InspectionPlanList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const submitInspectionPlanList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.InspectionPlanListSubmit,
    method: 'post',
    data: params
  })
}
export const detailInspectionPlanList = (id) => {
  return request({
    url: safetyApi.InspectionPlanListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeInspectionPlanList = (ids) => {
  return request({
    url: safetyApi.InspectionPlanListRemove,
    method: 'post',
    params: {
      ids: ids
    }
  })
}
export const getInspectionPlanTodoList = (params) => {
  return request({
    url: safetyApi.InspectionPlanTodoList,
    method: 'get',
    params: params
  })
}
export const approveInspectionPlan = (params) => {
  return request({
    url: safetyApi.InspectionPlanApprove,
    method: 'post',
    data: params
  })
}
export const revokeInspectionPlan = (params) => {
  return request({
    url: safetyApi.InspectionPlanRevoke,
    method: 'post',
    data: params
  })
}
export const getInspectionPlanSendList = (params) => {
  return request({
    url: safetyApi.InspectionPlanSendList,
    method: 'get',
    params: params
  })
}
export const inspectionPlan = { getInspectionPlanList, submitInspectionPlanList, detailInspectionPlanList, removeInspectionPlanList, getInspectionPlanTodoList, approveInspectionPlan, revokeInspectionPlan, getInspectionPlanSendList }
// .inspection record
export const getInspectionRecordList = (parameter) => {
  return request({
    url: safetyApi.InspectionRecordList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const submitInspectionRecordList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.InspectionRecordListSubmit,
    method: 'post',
    data: params
  })
}
export const detailInspectionRecordList = (id) => {
  return request({
    url: safetyApi.InspectionRecordListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeInspectionRecordList = (ids) => {
  return request({
    url: safetyApi.InspectionRecordListRemove,
    method: 'post',
    params: {
      ids: ids
    }
  })
}
export const inspectionRecord = { getInspectionRecordList, submitInspectionRecordList, detailInspectionRecordList, removeInspectionRecordList }

// risk
export const getRiskEvaluationLevel = () => {
  return request({
    url: safetyApi.RiskEvaluationLevel,
    method: 'get'
  })
}
export const getRiskControlLevel = () => {
  return request({
    url: safetyApi.RiskControlLevel,
    method: 'get'
  })
}
export const getRiskL = () => {
  return request({
    url: safetyApi.RiskL,
    method: 'get'
  })
}
export const getRiskS = () => {
  return request({
    url: safetyApi.RiskS,
    method: 'get'
  })
}
export const getRiskR = (parameter) => {
  return request({
    url: safetyApi.RiskR,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const CalculateRiskEvaluationLevel = (r) => {
  return request({
    url: safetyApi.CalculateRiskEvaluationLevel,
    method: 'get',
    params: {
      r
    }
  })
}
export const CalculateRiskControlLevel = (r) => {
  return request({
    url: safetyApi.CalculateRiskControlLevel,
    method: 'get',
    params: {
      r
    }
  })
}
export const risk = { getRiskEvaluationLevel, getRiskControlLevel, getRiskL, getRiskS, getRiskR, CalculateRiskEvaluationLevel, CalculateRiskControlLevel }
// .hazop
export const getHazopList = (parameter) => {
  if ('evaluationTime' in parameter) {
    parameter.startEvaluationTime = parameter.evaluationTime[0]
    parameter.endEvaluationTime = parameter.evaluationTime[1]
    delete parameter.evaluationTime
  }
  return request({
    url: safetyApi.HazopList,
    method: 'post',
    params: {
      ...parameter
    }
  })
}
export const submitHazopList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.HazopListSubmit,
    method: 'post',
    data: params
  })
}
export const detailHazopList = (id) => {
  return request({
    url: safetyApi.HazopListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeHazopList = (ids) => {
  return request({
    url: safetyApi.HazopListRemove,
    method: 'post',
    params: {
      ids: ids
    }
  })
}
export const hazop = { getHazopList, submitHazopList, removeHazopList, detailHazopList }
// .evaluation risk
export const submitEvaluationList1 = (params, method) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.submitEvaluationList1,
    method: method,
    data: params
  })
}
export const removeEvaluationList1 = (ids) => {
  return request({
    url: safetyApi.deleteEvaluation1,
    method: 'DELETE',
    data: ids
  })
}
export const submitEvaluationList2 = (params, method) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.submitEvaluationList2,
    method: method,
    data: params
  })
}
export const removeEvaluationList2 = (ids) => {
  return request({
    url: safetyApi.deleteEvaluation2,
    method: 'DELETE',
    data: ids
  })
}
export const submitEvaluationList3 = (params, method) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.submitEvaluationList3,
    method: method,
    data: params
  })
}
export const removeEvaluationList3 = (ids) => {
  return request({
    url: safetyApi.deleteEvaluation3,
    method: 'DELETE',
    data: ids
  })
}
export const submitEvaluationList4 = (params, method) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.submitEvaluationList4,
    method: method,
    data: params
  })
}
export const evaluationRisk = { submitEvaluationList1, removeEvaluationList1, submitEvaluationList2, removeEvaluationList2, submitEvaluationList3, removeEvaluationList3, submitEvaluationList4 }
// . work risk
export const getWorkRiskList = (parameter) => {
  if ('findingTime' in parameter) {
    parameter.startFindingTime = parameter.findingTime[0]
    parameter.endFindingTime = parameter.findingTime[1]
    delete parameter.findingTime
  }
  return request({
    url: safetyApi.WorkRiskList,
    method: 'post',
    params: {
      ...parameter
    }
  })
}
export const submitWorkRiskList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.WorkRiskListSubmit,
    method: 'post',
    data: params
  })
}
export const detailWorkRiskList = (id) => {
  return request({
    url: safetyApi.WorkRiskListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeWorkRiskList = (ids) => {
  return request({
    url: safetyApi.WorkRiskListRemove,
    method: 'post',
    params: {
      ids: ids
    }
  })
}
export const workRisk = { getWorkRiskList, submitWorkRiskList, removeWorkRiskList, detailWorkRiskList }
// .equipment
export const getEquipmentList = (parameter) => {
  if ('findingTime' in parameter) {
    parameter.startFindingTime = parameter.findingTime[0]
    parameter.endFindingTime = parameter.findingTime[1]
    delete parameter.findingTime
  }
  return request({
    url: safetyApi.EquipmentList,
    method: 'post',
    params: {
      ...parameter
    }
  })
}
export const submitEquipmentList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.EquipmentListSubmit,
    method: 'post',
    data: params
  })
}
export const detailEquipmentList = (id) => {
  return request({
    url: safetyApi.EquipmentListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeEquipmentList = (ids) => {
  return request({
    url: safetyApi.EquipmentListRemove,
    method: 'post',
    params: {
      ids: ids
    }
  })
}
export const equipment = { getEquipmentList, submitEquipmentList, removeEquipmentList, detailEquipmentList }
// .technology
export const getTechnologyList = (parameter) => {
  if ('findingTime' in parameter) {
    parameter.startFindingTime = parameter.findingTime[0]
    parameter.endFindingTime = parameter.findingTime[1]
    delete parameter.findingTime
  }
  return request({
    url: safetyApi.TechnologyList,
    method: 'post',
    params: {
      ...parameter
    }
  })
}
export const submitTechnologyList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.TechnologyListSubmit,
    method: 'post',
    data: params
  })
}
export const detailTechnologyList = (id) => {
  return request({
    url: safetyApi.TechnologyListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeTechnologyList = (ids) => {
  return request({
    url: safetyApi.TechnologyListRemove,
    method: 'post',
    params: {
      ids: ids
    }
  })
}
export const technology = { getTechnologyList, submitTechnologyList, removeTechnologyList, detailTechnologyList }

// task
export const getTaskType = () => {
  return request({
    url: safetyApi.TaskType,
    method: 'get'
  })
}
export const getTaskStatus = () => {
  return request({
    url: safetyApi.TaskStatus,
    method: 'get'
  })
}
export const getTaskHotLevel = () => {
  return request({
    url: safetyApi.TaskHotLevel,
    method: 'get'
  })
}
export const getTaskBlindType = () => {
  return request({
    url: safetyApi.TaskBlindType,
    method: 'get'
  })
}
export const getTaskHignCategory = () => {
  return request({
    url: safetyApi.TaskHignCategory,
    method: 'get'
  })
}
export const getTaskHoistingLevel = () => {
  return request({
    url: safetyApi.TaskHoistingLevel,
    method: 'get'
  })
}
export const taskForm = { getTaskHotLevel, getTaskBlindType, getTaskHignCategory, getTaskHoistingLevel }
// ticket
export const getTaskList = (parameter) => {
  if ('time' in parameter) {
    parameter.startTime = parameter.time[0]
    parameter.endTime = parameter.time[1]
    delete parameter.time
  }
  return request({
    url: safetyApi.TicketSearchList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const getPCTaskList = (parameter) => {
  if ('time' in parameter) {
    parameter.startTime = parameter.time[0]
    parameter.endTime = parameter.time[1]
    delete parameter.time
  }
  return request({
    url: safetyApi.getPCTaskList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}

export const getOtherTaskList = (params) => {
  return request({
    url: safetyApi.TaskOther,
    method: 'get',
    params
  })
}

export const submitTaskList = (parameter) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.TaskListSubmit,
    method: 'post',
    data: parameter
  })
}
export const removeTaskList = (ids) => {
  return request({
    url: safetyApi.TaskListRemove,
    method: 'post',
    params: {
      ids: ids
    }
  })
}
export const detailTaskList = (parameter) => {
  return request({
    url: safetyApi.TaskListDetail,
    method: 'post',
    params: parameter
  })
}
export const getTaskTodoList = (parameter) => {
  return request({
    url: safetyApi.TaskTodoList,
    method: 'post',
    data: parameter
  })
}
export const approveTask = (parameter) => {
  return request({
    url: safetyApi.TaskApprove,
    method: 'post',
    data: parameter
  })
}
export const revokeTask = (parameter) => {
  return request({
    url: safetyApi.TaskRevoke,
    method: 'post',
    data: parameter
  })
}
export const taskStats = (parameter) => {
  return request({
    url: safetyApi.TaskStats,
    method: 'post',
    data: parameter
  })
}

// 更改动火负责人
export const changeTaskCharger = (parameter) => {
  return request({
    url: safetyApi.changeTaskCharger,
    method: 'post',
    data: parameter
  })
}

// 获取人员列表
export const getTaskPersons = (parameter) => {
  return request({
    url: safetyApi.TaskPersons,
    method: 'post',
    data: parameter
  })
}

// 作业单位添加人员信息
export const addTaskPerson = (parameter) => {
  return request({
    url: safetyApi.addTaskPerson,
    method: 'post',
    data: parameter
  })
}
// 作业单位删除人员信息
export const deleteTaskPerson = (parameter) => {
  return request({
    url: safetyApi.deleteTaskPerson,
    method: 'post',
    data: parameter
  })
}
// 获取安全交底详情
export const getSafetyClarification = (parameter) => {
  return request({
    url: safetyApi.getSafetyClarification,
    method: 'post',
    data: parameter
  })
}

// 获取动火分析化验详情
export const getLaboratoryAnalysis = (parameter) => {
  return request({
    url: safetyApi.getLaboratoryAnalysis,
    method: 'post',
    data: parameter
  })
}

// 获取部门选项
export const getUnits = (parameter) => {
  return request({
    url: safetyApi.getUnits,
    method: 'post',
    data: parameter
  })
}

// 获取风险辨识结果
export const getRiskResult = (parameter) => {
  return request({
    url: safetyApi.getRiskResult,
    method: 'post',
    data: parameter
  })
}

export const task = { getPCTaskList, getTaskList, submitTaskList, removeTaskList, detailTaskList, getTaskTodoList, approveTask, revokeTask, taskStats }
// ticket record
export const getTaskRecordList = (parameter) => {
  if ('time' in parameter) {
    parameter.startTime = parameter.time[0]
    parameter.endTime = parameter.time[1]
    delete parameter.time
  }
  return request({
    url: safetyApi.TaskRecordList,
    method: 'post',
    params: {
      ...parameter
    }
  })
}

// potential risk
export const getPotentialRiskType = () => {
  return request({
    url: safetyApi.PotentialRiskType,
    method: 'get'
  })
}
export const getPotentialRiskLevel = () => {
  return request({
    url: safetyApi.PotentialRiskLevel,
    method: 'get'
  })
}
export const getAbarbeitungType = () => {
  return request({
    url: safetyApi.AbarbeitungType,
    method: 'get'
  })
}
export const getPotentialRiskPlanData = (parameter) => {
  return request({
    url: safetyApi.PotentialRiskPlan,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
// .reform
export const getReformList = (parameter) => {
  if ('checkTime' in parameter) {
    parameter.checkTime = parameter.checkTime.join()
  }
  if ('abarbeitungDeadline' in parameter) {
    parameter.abarbeitungDeadline = parameter.abarbeitungDeadline.join()
  }
  return request({
    url: safetyApi.ReformList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const submitReformList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.ReformListSubmit,
    method: 'post',
    data: params
  })
}
export const detailReformList = (id) => {
  return request({
    url: safetyApi.ReformListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeReformList = (ids) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.ReformListRemove,
    method: 'post',
    data: ids
  })
}
export const getReformStatsList = (params) => {
  return request({
    url: safetyApi.ReformStatsList,
    method: 'get',
    params: {
      params
    }
  })
}
export const getReformHistoryList = (params) => {
  return request({
    url: safetyApi.ReformHistoryList,
    method: 'get',
    params: params
  })
}
export const abarbeitungReformList = (id) => {
  return request({
    url: safetyApi.ReformListAbarbeitung,
    method: 'get',
    params: {
      id
    }
  })
}
export const delayReformItem = (data) => {
  return request({
    url: safetyApi.ReformItemDelay,
    method: 'post',
    data: data
  })
}
export const getDelayInfo = (params) => {
  return request({
    url: safetyApi.ReformDelayInfo,
    method: 'get',
    params: {
      ...params
    }
  })
}
export const approveReformDelay = (data) => {
  return request({
    url: safetyApi.ReformDelayApprove,
    method: 'post',
    data: data
  })
}
export const getApproveInfo = (params) => {
  return request({
    url: safetyApi.ReformApproveInfo,
    method: 'get',
    params: {
      ...params
    }
  })
}
export const rectifyReformItem = (data) => {
  return request({
    url: safetyApi.ReformItemRectify,
    method: 'post',
    data: data
  })
}
export const recheckReformItem = (data) => {
  return request({
    url: safetyApi.ReformItemRecheck,
    method: 'post',
    data: data
  })
}
export const getReformTodoList = (params) => {
  return request({
    url: safetyApi.ReformTodoList,
    method: 'get',
    params: {
      ...params
    }
  })
}
export const reform = { getReformList, submitReformList, removeReformList, detailReformList, getReformStatsList, getReformHistoryList, delayReformItem, getDelayInfo, approveReformDelay, getApproveInfo, rectifyReformItem, getReformTodoList, recheckReformItem }
// .investigation
export const getInvestList = (parameter) => {
  return request({
    url: safetyApi.InvestList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const submitInvestList = (params) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.InvestListSubmit,
    method: 'post',
    data: params
  })
}
export const detailInvestList = (id) => {
  return request({
    url: safetyApi.InvestListDetail,
    method: 'get',
    params: {
      id
    }
  })
}
export const removeInvestList = (ids) => {
  return request({
    headers: {
      'Content-Type': 'application/json;charset=UTF-8'
    },
    url: safetyApi.InvestListRemove,
    method: 'post',
    data: ids
  })
}
export const invest = { getInvestList, submitInvestList, removeInvestList, detailInvestList }

// flow 工作流
export function getFlowHistoryList(parameter) {
  return request({
    url: safetyApi.FlowHistoryList,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export function getFlowDiagram(parameter) {
  return request({
    url: safetyApi.FlowDiagram,
    method: 'get',
    params: {
      ...parameter
    }
  })
}
export const flow = { getFlowHistoryList, getFlowDiagram }

// file upload
export const fileUpLoad = (parameter) => {
  return request({
    headers: {
      'Content-Type': 'multipart/form-data;'
    },
    url: safetyApi.FileUpLoad,
    method: 'post',
    data: parameter
  })
}
export const fileDownload = (link) => {
  return request({
    url: safetyApi.FileDownload,
    method: 'get',
    params: {
      ...link
    }
  })
}

