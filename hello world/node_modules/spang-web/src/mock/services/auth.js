import Mock from 'mockjs2'
import { builder, getBody, getQueryParameters } from '../util'

const username = ['admin', 'super']
// 强硬要求 ant.design 相同密码
// '21232f297a57a5a743894a0e4a801fc3',
// const password = ['8914de686ab28dc22f30d3d8e107ff6c', '21232f297a57a5a743894a0e4a801fc3'] // admin, ant.design
const password = ['admin', 'ant.design']
const captcha = []
const imgcaptcha = {}

const login = (options) => {
  const body = getQueryParameters(options)
  // const body = getBody(options)
  if (!username.includes(body.username) || !password.includes(body.password)) {
    return builder({ isLogin: true }, '账户或密码错误', 401)
  }
  if (imgcaptcha[body.key] !== body.code) {
    return builder({ isLogin: true }, '验证码错误', 401)
  }
  return builder({
    'id': Mock.mock('@guid'),
    'name': Mock.mock('@name'),
    'username': 'admin',
    'password': '',
    'avatar': 'https://gw.alipayobjects.com/zos/rmsportal/jZUIxmJycoymBprLOUbT.png',
    'status': 1,
    'telephone': '',
    'lastLoginIp': '27.154.74.117',
    'lastLoginTime': 1534837621348,
    'creatorId': 'admin',
    'createTime': 1497160610259,
    'deleted': 0,
    'roleId': 'admin',
    'lang': 'zh-CN',
    'access_token': '4291d7da9005377ec9aec4a71ea837f',
    'refresh_token': '4291d7da9005377ec9aec4a71ea837f'
  })
}

const phone = (options) => {
  const body = getBody(options)
  if (!captcha.includes(parseInt(body.captcha))) {
    return builder({ isLogin: true }, '验证码错误', 401)
  }
  return builder({
    'id': Mock.mock('@guid'),
    'name': Mock.mock('@name'),
    'username': 'admin',
    'password': '',
    'avatar': 'https://gw.alipayobjects.com/zos/rmsportal/jZUIxmJycoymBprLOUbT.png',
    'status': 1,
    'telephone': '',
    'lastLoginIp': '27.154.74.117',
    'lastLoginTime': 1534837621348,
    'creatorId': 'admin',
    'createTime': 1497160610259,
    'deleted': 0,
    'roleId': 'admin',
    'lang': 'zh-CN',
    'token': '4291d7da9005377ec9aec4a71ea837f'
  }, '', 200, { 'Custom-Header': Mock.mock('@guid') })
}

const logout = () => {
  return builder({}, '[测试接口] 注销成功')
}

const smsCaptcha = () => {
  const code = Mock.mock('@integer(10000, 99999)')
  // console.log('测试对象 code 获取阶段', code)
  captcha.push(code)
  // console.log('测试对象 验证码 获取阶段', captcha)
  return builder({ captcha: code })
}

const imgCaptcha = () => {
  const value = Mock.mock({ 'regexp': /\w{4}/ }).regexp
  const key = Mock.mock({ 'regexp': /\w{6}/ }).regexp
  imgcaptcha[key] = value
  // console.log('IMG ====>', imgcaptcha)
  // return builder({ image: Mock.Random.dataImage('120x40', value), key: key })
  return ({
      image: Mock.Random.dataImage('120x40', value),
      key: key
    }
  )
}

const twofactor = () => {
  return builder({ stepCode: Mock.mock('@integer(0, 1)') })
}

Mock.mock('/auth/phone', 'post', phone)
Mock.mock('/account/sms', 'post', smsCaptcha)
Mock.mock('/auth/2step-code', 'post', twofactor)
Mock.mock('/spang-auth/oauth/logout', 'get', logout)
Mock.mock(/\/spang-auth\/oauth\/token/, 'post', login)
Mock.mock('/spang-auth/oauth/captcha', 'get', imgCaptcha)
