/* eslint-disable no-useless-escape */
/* eslint-disable no-prototype-builtins */
import { GET_DEPT_ROOT, GET_DEPT_TREE, GET_USER_BY_DEPT, GET_PAGE_EMPLOYEE, SEARCH_USER, GET_ROLE_TREE, GET_POSITION } from '@/api'

const toHump = name => name.replace(/\_(\w)/g, function (all, letter) {
  return letter.toUpperCase()
})
// 需要自行设置nodeID  重要！！！
async function getDepChildNode (parentId) {
  const promises = [GET_DEPT_TREE({ parentId })]
  let res = []
  // loadUser && promises.push( GET_USER_BY_DEPT( { deptId: orgId } ) )
  try {
    res = await Promise.all(promises)
  } catch (error) { /* this.$message.error('获取子节点数据出错') */ }
  const nodes = res.reduce((p, c) => {
    return [...p, ...c.data]
  }, [])
  return nodes
}
// 需要返回一个promise
async function loadDepOrUser (node, loadDep = true) {
  let nodeData = []
  if (node.level === 0) { // 根目录
    const test = await getRootDept() // 获取根节点
    nodeData = [test]
  } else if (node.level === 1) {
    var deptListData = await getDepChildNode(node.data.deptId) // 获取部门节点
    nodeData = deptListData.map(item => {
      return {
        deptId: item.id,
        deptName: item.title,
        parentDeptId: item.parentId
      }
    })
  } else if (!loadDep && node.level === 2) {
    var userListData = (await GET_PAGE_EMPLOYEE({ deptId: node.data.deptId, size: 9999 })).data // 获取部门下人员
    nodeData = userListData.records.map(item => {
      return {
        userId: item.id,
        userName: item.realName,
        deptId: item.deptId
      }
    })
  }
  return nodeData
}
// 获取组织结构根节点
// 需要自行设置nodeID  重要！！！
async function getRootDept () {
  let res = []
  try {
    var data = (await GET_DEPT_ROOT()).data
    const depData = {
      deptId: data[0].id,
      deptName: data[0].title
    }
    res = depData
  } catch (err) { }
  return res
}

async function loadRole (node) {
  let res = []
  try {
    var data = (await GET_ROLE_TREE()).data
    var nodeData = data.map(item => {
      return {
        deptId: item.id,
        deptName: item.title,
        parentDeptId: item.parentId,
        hasChildren: item.hasChildren
      }
    })
    res = nodeData
  } catch (error) { }
  console.log(res)
  return res
}

async function loadRole1 (node) {
  let nodeData = []
  if (node.level === 0) { // 根目录
    const test = (await GET_ROLE_TREE({ parentId: 0 })).data // 获取根节点
    nodeData = test.map(item => {
      return {
        roleId: item.id,
        roleName: item.title,
        parentRoleId: item.parentId,
        hasChildren: item.hasChildren
      }
    })
  } else {
    var deptListData = (await GET_ROLE_TREE({ parentId: node.data.roleId })).data // 获取部门节点
    nodeData = deptListData.map(item => {
      return {
        roleId: item.id,
        roleName: item.title,
        parentRoleId: item.parentId,
        hasChildren: item.hasChildren
      }
    })
  }
  return nodeData
}

async function loadPositionData (node) {
  let res = []
  try {
    var data = (await GET_POSITION()).data
    var nodeData = data.map(item => {
      return {
        postId: item.id,
        postName: item.postName

      }
    })
    res = nodeData
  } catch (error) {}
  console.log(res)
  return res
}

function loadDepData (node) {
  return loadDepOrUser(node) // 返回的promise
}

function loadUserData (node) {
  return loadDepOrUser(node, false) // 返回的promise
}

function loadRoleData (node) {
  return loadRole1(node)
}

const defaultOption = {
  tabName: '部门', // 选项卡名称
  tabKey: 'dep', // 选项卡键值 传入的selected要和键值保持一致 eg: {dep: [], role: []}
  children: 'children', // 子节点标志
  // 生成每个节点的id 保证唯一
  nodeId: function (data) {
    return data.hasOwnProperty('userId') ? data.userId : data.deptId
  },
  // 生成节点的名称 可选值 string | function
  label: function (data, node) {
    return data.hasOwnProperty('userId') ? data.userName : data.deptName
  },
  // 判断是否为叶子节点 可选值 string | function
  isLeaf: function (data, node) {
    return data.hasOwnProperty('userId') // 含有empID为人员  且为叶子节点
  },
  // 搜索后的结果如果需要展示一些提示文字 例如搜索人员 提示人员所属部门  可以使用该属性
  // function
  searchResTip: function (data) {
    return '部门：' + data.deptName
  },
  // 判断该节点是否可选 例如同时选择部门和部门下的人
  disabled: function (data, node) {
    return false
  },
  // 动态请求后台拿到节点数据 返回一个promise
  onload: loadDepData,
  // 搜索节点方法
  onsearch: async function (searchString, resolve, reject) {
    // const param = { page: 1, limit: 200, searchName: searchString }
    var data = (await SEARCH_USER({ realName: searchString })).data
    var result = data.map(item => {
      return {
        userName: item.realName,
        userId: item.id,
        deptName: item.deptName,
        deptId: item.deptId
      }
    })
    resolve(result)
  }
}

export const DEP_CONFIG = Object.assign({}, defaultOption)
export const ROLE_CONFIG = Object.assign({}, defaultOption, { tabKey: 'role', tabName: '角色', nodeID: (data) => data.roleId, label: (data) => data.roleName, onload: loadRoleData, isLeaf: (data, node) => !data.hasChildren })
export const USER_CONFIG = Object.assign({}, defaultOption, { tabKey: 'user', tabName: '指定人员', onload: loadUserData, disabled: (data, node) => !data.hasOwnProperty('userId') })
const DEP_USER_CONFIG = Object.assign({}, defaultOption, { tabKey: 'dep&user', tabName: '部门和人员', onload: loadUserData, disabled: () => false })
const POSITION_CONFIG = Object.assign({}, defaultOption, { tabKey: 'position', tabName: '岗位', nodeID: (data) => data.postId, label: (data) => data.postName, onload: loadPositionData, isLeaf: () => true })
export const CONFIG_LIST = [DEP_CONFIG, ROLE_CONFIG, USER_CONFIG, DEP_USER_CONFIG, POSITION_CONFIG]
